<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 周小猪</title>
    <link>http://ganodermaking.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 周小猪</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jan 2021 15:33:14 +0800</lastBuildDate><atom:link href="http://ganodermaking.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>掌握核心技术之微服务</title>
      <link>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 13 Jan 2021 15:33:14 +0800</pubDate>
      
      <guid>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid>
      <description>服务网关 服务网关 = 路由转发 + 过滤器  路由转发：接收一切外界请求，转发到后端的微服务上去； 过滤器：在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等。  注册中心  Eureka：支持AP，保证高可用。 Zookeeper：支持CP，保证强一致性。 Nacos：同时支持AP和CP，同时还支持配置中心。  长轮询 服务端收到客户端发来的请求后不直接响应，而是将请求hold住一段时间，在这段时间内如果数据有变化，服务端才会响应，如果没有变化则在到达一定的时间后才返回请求。</description>
    </item>
    
    <item>
      <title>掌握核心技术之算法</title>
      <link>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 13 Jan 2021 15:33:14 +0800</pubDate>
      
      <guid>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%AE%97%E6%B3%95/</guid>
      <description>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。</description>
    </item>
    
    <item>
      <title>掌握核心技术之网络</title>
      <link>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Wed, 13 Jan 2021 15:33:14 +0800</pubDate>
      
      <guid>http://ganodermaking.github.io/post/%E6%8E%8C%E6%8F%A1%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BD%91%E7%BB%9C/</guid>
      <description>计算机网络  传输层：TCP和UDP  TCP/UDP区别？ 两次握手为什么不可以？ 描述三次握手过程？ 为什么要四次挥手？   应用层：HTTP和HTTPS  HTTP可以使用UDP吗？ 对称加密、非对称加密区别？ HTTP与HTTPS区别？ GET与POST的区别？ Session与Cookie的区别？ http请求过程？ HTTP常见状态码？    传输层：TCP和UDP TCP/UDP区别  TCP是面向连接的，UDP是无连接的。 TCP是可靠的，UDP不可靠。 TCP只支持点对点通信，UDP支持一对一、一对多、多对一、多对多。 TCP是面向字节流的，UDP是面向报文的。 TCP有拥塞控制机制，UDP没有。 TCP首部开销（20字节）比UDP首部开销（8字节）要大。   ACK、SYN和FIN这些大写的单词表示标志位，其值要么是1，要么是0；ack、seq小写的单词表示序号。</description>
    </item>
    
  </channel>
</rss>
